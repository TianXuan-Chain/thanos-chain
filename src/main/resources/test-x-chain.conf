peer.discovery = {


    # List of the seed peers to start
    # the search for online peers
    # values: [ip:port, enode://nodeid@ip:port, ip:port ...]
    ip.list = [
        "127.0.0.1:30303",
        "127.0.0.1:30305",
    ]

    # external IP/hostname which is reported as our host during discovery
    # if not set, the service http://checkip.amazonaws.com is used
    # the last resort is to get the peer.bind.ip address
    external.ip = 127.0.0.1

    # Local network adapter IP to which
    # the discovery UDP socket is bound
    # e.g: 192.168.1.104
    #
    # if the value is empty it will be retrieved
    # by punching to some known address e.g: www.google.com
    bind.ip = ""

    # indicates whether the discovery will include own home node
    # within the list of neighbor nodes
    public.home.node = true

    # indicates if the discovered nodes and their reputations
    # are stored in DB and persisted between VM restarts
    persist = true

    # the period in seconds with which the discovery
    # tries to reconnect to successful nodes
    # 0 means the nodes are not reconnected
    touchPeriod = 600

    # the maximum nuber of nodes to reconnect to
    # -1 for unlimited
    touchMaxNodes = 100

    # number of workers that
    # test the peers for being
    # online [1..10]
    workers = 8
}


peer {
    # Port on which x-chanin will listen
    # for incoming connections
    listen.discoveryPort = 30304

    listen.rpcPort = 8889

    # Private key of the peer
    # The key is generated by default on the first run and stored in the database folder
    # If you have your own peer ID, specify its private key here
    # derived getCaHash = dead745c1dbcde518b48e52aca1e8d5ba666005a2c8804e39826c6080fb11c1e8abe41d1e41896e871f204f790a90fa9781744cccecf492212192a7c56e7673b
    # privateKey = f67c4032a7ff79bbfa7a780331b235c4eb681d51a0704cb1562064fb6c4bced4

    # Boot node list
    active = [
        # Sample entries:
        # { url = "enode://<hex nodeID>@hostname.com:30303" }
//        {
//           ip = hostname.com
//           port = 30303
//           getCaHash = e437a4836b77ad9d9ffe73ee782ef2614e6d8370fcf62191a6e488276e23717147073a7ce0b444d485fff5a0c34c4577251a7a990cf80d8542e21b95aa8c5e6c
//        }
        {
            ip = 127.0.0.1
            port = 30303
        },
        {
            ip = 127.0.0.1
            port = 30304
        }
    ]

    # max number of active peers our node will maintain
    # extra peers trying to connect us will be dropped with TOO_MANY_PEERS message
    # the incoming connection from the peer matching 'peer.trusted' entry is always accepted
    maxActivePeers = 30

    # connection timeout for trying to
    # connect to a peer [seconds]
    connection.timeout = 2

    # how much time [seconds]
    # we will wait for a message
    # to arrive before closing the channel
    channel.read.timeout = 60

    p2p {

        # forces peer to send Handshake message in format defined by EIP-8,
        # see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-8.md
        eip8 = true
    }
}

consensus {
    // 1 = MultipleOrderedProposers;
    // 2 = RotatingProposer;
    proposerType = 2

    contiguousRounds = 1
}


# the folder resources/genesis
# contains several versions of
# genesis configuration according
# to the network the peer will run on
genesis = genesis.json

# path to genesis file
# has priority over `genesis` option
# genesisFile = /some/path/to/frontier.json

# Blockchain settings (constants and algorithms) which are
# not described in the genesis file (like MINIMUM_DIFFICULTY or Mining algorithm)
# The possible named presets are:
# - main : the main network (Frontier-Homestead-...)
# - ropsten: Ropsten test network
# - testnet: Ethercamp test network
# - olympic: pre-Frontier Olympic network
# For custom network settings please refer to 'blockchain.config.class'
blockchain.config.name = "main"

# This is a more advanced replacement for 'blockchain.config.name'
# Here the exact org.ethereum.config.BlockchainForkConfig implementation
# class name can be specified.
# Only one of two options (this and above) can be defined.
#blockchain.config.class = "org.ethereum.config.fork.MainForkConfig"

database {
    # place to save physical livenessStorage files
    # can be either absolute or relative path
    dir = database

    # defines a number of opened files by db instance
    # this number has significant impact on read amplification
    # on the other hand it can force exceeding of user's limit,
    # OS usually set it to 1024 for all applications
    maxOpenFiles = 512
}




# Solidity options
solc {
    # Full path to solc executable
    # If path is not provided, bundled Solidity Compiler is used
    path = null
}

# ========================================================
#    Debug and advanced options
# ========================================================




# structured trace
# is the trace being
# collected in the
# form of objects and
# exposed to the user
# in json or any other
# convenient form.
vm.structured {
  trace = false
  dir = vmtrace
  initStorageLimit = 10000
}



# enables/disables internal ethTransactions data record
# a single ethTransaction can potentially collect large amount
# of call data (especially in tests) so there is an option to disable it
record.internal.ethTransactions.data = true


# hello phrase will be included in
# the hello message of the peer
hello.phrase = Dev



#crypto settings, such as signECDSA, getHash, etc
crypto {
	#JCA cryptoprovider name.
	providerName="SC"
	#Used for create JCA MessageDigest
	hash.alg256="ETH-KECCAK-256"
	hash.alg512="ETH-KECCAK-512"
}
