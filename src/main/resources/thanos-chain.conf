network {
    peer.rpc.ip = 127.0.0.1
    peer.bind.ip = 0.0.0.0
    peer.listen.discoveryPort = 30303
    peer.listen.rpcPort = 8888
    peer.channel.read.timeout = 60
    peer.discovery = {
        # List of the seed peers to start
        # the search for online peers
        ip.list = [
            "127.0.0.1:30304"
        ]
    }
    // need consistency pattern of each node
    transferDataEncrypt = 1

    // default false
    epollSupport = false

    nettyPoolByteBuf = false

    gateway {
        localListenAddress = 7007
        remoteServiceAddress = "127.0.0.1:7008"
        pushTxsQueueSize = 6
    }
}

consensus {
    // 1 = MultipleOrderedProposers;
    // 2 = RotatingProposer;
    proposerType = 2
    contiguousRounds = 1
    maxPackSize = 50000
    maxCommitEventNumInMemory = 53
    maxPrunedEventsInMemory = 4
//    reimportUnCommitEvent = true
    poolLimit = 3000
    roundTimeoutBaseMS = 5000
    parallelProcessorNum = 8
}

state {
    checkTimeoutMS = 1500
    maxCommitBlockInMemory = 5
}

db {
    ledger {
        maxOpenFiles = 1000
        maxThreads = 4
        writeBufferSize = 64
        contractStateCacheSize = 10000
    }

    consensusChain {
        maxOpenFiles = 1000
        maxThreads = 4
        writeBufferSize = 64
        caContractStateCacheSize = 1000
    }
}

resource {
    database {
        #needEncrypt = true
        encryptAlg = SM4
        # place to save physical livenessStorage files
        # must use absolute path
        dir = "C:\\dev\\project\\netease\\blockchain\\thanos-chain\\database"
    }
    logConfigPath = "C:\\dev\\project\\netease\\blockchain\\thanos-chain\\src\\main\\resources\\logback.xml"
}

vm.structured {
  trace = false
  dir = vmtrace
  initStorageLimit = 10000
}

#tls settings, such as path of keystore,truststore,etc
tls {
    keyPath= "C:\\dev\\project\\netease\\blockchain\\thanos-chain\\src\\main\\resources\\ec-tls\\node.key"
    certsPath= "C:\\dev\\project\\netease\\blockchain\\thanos-chain\\src\\main\\resources\\ec-tls\\chain.crt"
}

